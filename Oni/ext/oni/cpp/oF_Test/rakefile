require 'rake/testtask'
require 'rake/clean'
require 'fileutils'
require 'open3'

# generate depend file for gcc dependencies
# sh "gcc -MM *.c > depend"

NAME = 'oni'

# the same as before
Rake::TestTask.new do |t|
	# t.test_files = []
	
	# t.libs << 'test'

	t.test_files = ["test/test_node_creation.rb"]
end



# interactive command-line program execution
def run_i(cmd_string)
	stdin, stdout_and_stderr, wait_thr = Open3.popen2e cmd_string
	
	output = nil
	begin
		output = stdout_and_stderr.gets
		puts output
	end while output
	
	stdin.close
	stdout_and_stderr.close
end



# make the :test task depend on the shared
# object, so it will be built automatically
# before running the tests

# rule to build the extension: this says
# that the extension should be rebuilt
# after any change to the files in ext

c_library = "lib/#{NAME}/#{NAME}.so"

source_files = Array.new
source_files += Dir.glob("ext/#{NAME}/*{.rb,.c}")
source_files += ["ext/#{NAME}/extconf.rb"]

source_files += Dir.glob("ext/#{NAME}/cpp/cpp_core/*{.cpp,.h}")
source_files += Dir.glob("ext/#{NAME}/cpp/cpp_interface/*{.cpp,.h}")

file c_library => source_files do
	Dir.chdir("ext/#{NAME}") do
		# this does essentially the same thing
		# as what RubyGems does
		ruby "extconf.rb"
		
		# Run make
		flags = ""
		stdin, stdout_and_stderr, wait_thr = Open3.popen2e "make " + flags
		
		output = nil
		begin
			output = stdout_and_stderr.gets
			puts output
		end while output
		
		stdin.close
		stdout_and_stderr.close
	end
	
	cp "ext/#{NAME}/#{NAME}.so", "lib/#{NAME}"
end

task :test => c_library

task :package => c_library do
	`gem build oni.gemspec`
end


# use 'rake clean' and 'rake clobber' to
# easily delete generated files
CLEAN.include('ext/**/*{.o,.log,.so}')
# CLEAN.include('ext/**/Makefile')
CLOBBER.include('lib/**/*.so')

desc "Run tests"
# task :default => [:test, :package]

namespace :windows do
	task :package => :default do
		`gem build oni_win_precompiled.gemspec`		
	end
	
	task :release => Rake::Task['windows:package'] do
		
	end
end






BASEPATH = File.absolute_path(File.dirname(__FILE__))
puts BASEPATH

CORE_BUILD_PATH = File.expand_path("./mySketch", BASEPATH)
LIB_BUILD_PATH  = File.expand_path("./static_lib_creator", BASEPATH)
LIB_OUTPUT_PATH = File.expand_path("./mySketch/lib", BASEPATH)

number_of_cores = 4




task :default => :build

# generate all the .o files using the standard openFrameworks build system
task :build_core do
	Dir.chdir CORE_BUILD_PATH do
		run_i "make -j#{number_of_cores}"
	end
end

task :clean_core do
	Dir.chdir CORE_BUILD_PATH do
		run_i "make clean"
	end
end







# temporarily swap out the makefile for an alternate version
# 
# main_filepath, alt_filepath:  Paths to main and alt makefile, relative to common_root.
# common_root:                  As above.
# work_dir:                     Path under which to run the commands specified in the block.
def swap_makefile(common_root, main_filepath, alt_filepath, work_dir, &block)
	swap_ext = ".temp"
	swap_filepath = File.join(common_root, "Makefile#{swap_ext}")
	
	Dir.chdir BASEPATH do
		main_filepath = File.expand_path(File.join(common_root, main_filepath))
		alt_filepath  = File.expand_path(File.join(common_root, alt_filepath))
	end
	
	
	
	FileUtils.mv main_filepath, swap_filepath # rename main makefile
	FileUtils.cp alt_filepath, main_filepath  # switch to .a-creating mkfile
	
	
	# run tasks associated with the alternate file
	Dir.chdir work_dir do
		block.call
	end
	
	
	FileUtils.cp swap_filepath, main_filepath # restore temp
	FileUtils.rm swap_filepath                # delete temp		
end

# use a modified version of the oF build system to generate a C++ static lib
task :build_library do
	# this command is to use the weird symlinked directory
	# this doesn't seem to work right...
	
	# Dir.chdir LIB_BUILD_PATH do
	# 	run_i "make static_lib"
	# end
	
	
	
	swap_makefile("./mySketch/", "./Makefile", "./Makefile.static_lib", "./mySketch") do
		run_i "make static_lib"
	end
	
	
	# this command copies over the other makefile temporarily.
	# this totally works, but is ugly in many ways.
end

task :clean_library do
	Dir.chdir LIB_BUILD_PATH do
		run_i "make clean_static_lib"
	end
end


# a way to test that all variables needed to build the static lib are set
task :lib_variable_test do
	# NOTE: if the library-building procedure changes, this should change to match
	Dir.chdir LIB_BUILD_PATH do
		run_i "make variable_test"
	end
end

# check what's in the static lib that's being outputted
# (linux and OS only)
task :lib_output_test do
	# NOTE: this can stay the same regaurdless of the library-building method
	Dir.chdir LIB_OUTPUT_PATH do
		# the -C flag is for de-mangling the C++ function names
		run_i "nm -C libOFSketch.a "
	end
end



# TODO: current build system generates a C++ only executable. Delete that.
task :build => [:build_core, :build_library]
task :clean => [:clean_core, :clean_library]


# run just the C++ components
task :run => :build do
	Dir.chdir CORE_BUILD_PATH do
		run_i "make RunRelease"
	end
end






# show the .o files generated that are specific to this project
task :examine do
	path = File.expand_path("./mySketch/obj/linux64/Release/src", BASEPATH)
	Dir.chdir path do
		puts "local oF build directory:"
		p Dir['./*']
	end
end
