require 'rake/testtask'
require 'rake/clean'
require 'open3'




# interactive command-line program execution
def run_i(cmd_string)
	stdin, stdout_and_stderr, wait_thr = Open3.popen2e cmd_string
	
	output = nil
	begin
		output = stdout_and_stderr.gets
		puts output
	end while output
	
	stdin.close
	stdout_and_stderr.close
end





# generate depend file for gcc dependencies
# sh "gcc -MM *.c > depend"

NAME = 'oni'

# the same as before
Rake::TestTask.new do |t|
	# t.test_files = []
	
	# t.libs << 'test'
	# t.test_files = FileList['test/test*.rb']
end



# make the :test task depend on the shared
# object, so it will be built automatically
# before running the tests

# rule to build the extension: this says
# that the extension should be rebuilt
# after any change to the files in ext

c_library = "lib/#{NAME}/#{NAME}.so"


# TODO: update source file list
source_files = Array.new
# source_files += Dir.glob("ext/#{NAME}/*{.rb,.c}")
# source_files += ["ext/#{NAME}/extconf.rb"]


# Dir.glob("ext/#{NAME}/cpp/oF_Test/*{.cpp,.h}")
source_files += Dir.glob("ext/#{NAME}/**/*{.cpp,.h}")




file c_library => source_files do
	Dir.chdir("ext/#{NAME}") do
		# this does essentially the same thing
		# as what RubyGems does
		ruby "extconf.rb"
		
		
		puts "======= Top level Rakefile"
		
		
		# Run make
		flags = ""
		stdin, stdout_and_stderr, wait_thr = Open3.popen2e "make " + flags
		
		output = nil
		begin
			output = stdout_and_stderr.gets
			puts output
		end while output
		
		stdin.close
		stdout_and_stderr.close
	end
	
	cp "ext/#{NAME}/#{NAME}.so", "lib/#{NAME}"
end




task :test => c_library

task :package => c_library do
	`gem build oni.gemspec`
end


# use 'rake clean' and 'rake clobber' to
# easily delete generated files
CLEAN.include('ext/**/*{.o,.log,.so}')
# CLEAN.include('ext/**/Makefile')
CLOBBER.include('lib/**/*.so')
# CLOBBER.include('lib/**/*.gem') # fix this up. I do want to clobber the gem tho

desc "Run tests"
task :default => [:test, :package]

task :run do
	# require "/home/ravenskrag/Experiments/RubyCPP/Oni/lib/oni.rb"
	require "/home/ravenskrag/Experiments/RubyCPP/Oni/lib/oni/oni.so"
	
	class Window < Oni::Window
		def initialize
			super()
		end
		
		def setup
			
		end
		
		def update
			
		end
		
		def draw
			
		end
	end
	
	x = Window.new
	x.show
end

task :so_test do
	run_i "nm -C -D /home/ravenskrag/Experiments/RubyCPP/Oni/lib/oni/oni.so"
end

# namespace :windows do
# 	task :package => :default do
# 		`gem build oni_win_precompiled.gemspec`		
# 	end
	
# 	task :release => Rake::Task['windows:package'] do
		
# 	end
# end
